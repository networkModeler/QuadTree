////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// heap.cpp : class for fixed size heap
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "entry.h"
using namespace std;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Default constructor
Entry::Entry()
{
    // N/A
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Constructor
Entry::Entry(int x, int y, double distance)
    : x(x), y(y), distance(distance)
{
    // N/A
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Get the distance
double Entry::getDistance()
{
    return this->distance;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Return true if given point has same coordinates as this entry
bool Entry::equivalent(Point* point)
{
    if (point->getX() == this->x && point->getY() == this->y)
    {
        return true;
    }
    else
    {
        return false;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Print
void Entry::print()
{
    cout << "(" << this->x << "," << this->y << ")" << " distance " << this->distance << endl;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Compare function for priority queue, maximum element on top
bool Entry::operator()(Entry*& entry1, Entry*& entry2)
{
    return entry1->distance < entry2->distance;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
